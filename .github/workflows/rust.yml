name: Rust

on:
  push: {}
  pull_request: {}
  workflow_dispatch: {}
  schedule:
    #       Min Hr Day Month Weekday; so this should be 1:05am each day.
    - cron: '5  1  *   *     *'

jobs:
  build_test:
    runs-on: windows-latest
    strategy:
      matrix:
        rust:
        # x86 without sse/sse2 on by default
        - { target: i586-pc-windows-msvc, toolchain: 1.51.0 }
        - { target: i586-pc-windows-msvc, toolchain: stable }
        - { target: i586-pc-windows-msvc, toolchain: beta }
        - { target: i586-pc-windows-msvc, toolchain: nightly }
        # x86
        - { target: i686-pc-windows-msvc, toolchain: 1.51.0 }
        - { target: i686-pc-windows-msvc, toolchain: stable }
        - { target: i686-pc-windows-msvc, toolchain: beta }
        - { target: i686-pc-windows-msvc, toolchain: nightly }
        # x86_64
        - { target: x86_64-pc-windows-msvc, toolchain: 1.51.0 }
        - { target: x86_64-pc-windows-msvc, toolchain: stable }
        - { target: x86_64-pc-windows-msvc, toolchain: beta }
        - { target: x86_64-pc-windows-msvc, toolchain: nightly }
    steps:
    - uses: actions/checkout@v1
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust.toolchain }}
        target:  ${{ matrix.rust.target }}
        profile: minimal
        default: true
    - name: suppress target-cpu=native on i586
      if: matrix.rust.target == 'i586-pc-windows-msvc'
      run: rm .cargo/config.toml
    - name: Run tests with default features
      run: cargo test --target ${{ matrix.rust.target }}
    - name: Run tests with all features
      run: cargo test --target ${{ matrix.rust.target }} --all-features

  avx512_emulated_test:
    runs-on: windows-latest
    strategy:
      matrix:
        rust:
          # - { target: x86_64-pc-windows-msvc, toolchain: stable }
          - { target: x86_64-pc-windows-msvc, toolchain: nightly }
    steps:
    - uses: actions/checkout@v3
    
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust.toolchain }}
        target: ${{ matrix.rust.target }}
        profile: minimal
        default: true
    
    # Download and install Intel SDE
    - name: Install Intel SDE
      shell: powershell
      run: |
        $sdeVersion = "9.58.0"
        $sdeDate = "2025-06-16"
        $sdeID = "859732"        
        $sdeFilename = "sde-external-${sdeVersion}-${sdeDate}-win.tar.xz"
        
        # Direct download URL pattern discovered from the Python script
        # These URLs work without cookie/license acceptance as of 2020
        $downloadUrls = @(
          "https://downloadmirror.intel.com/${sdeID}/${sdeFilename}",
          "https://software.intel.com/content/dam/develop/external/us/en/protected/${sdeFilename}"
        )
        
        $downloaded = $false
        foreach ($url in $downloadUrls) {
          try {
            Write-Host "Attempting to download Intel SDE from: $url"
            $ProgressPreference = 'SilentlyContinue'  # Speed up download
            Invoke-WebRequest -Uri $url -OutFile $sdeFilename -ErrorAction Stop
            $downloaded = $true
            Write-Host "Successfully downloaded Intel SDE"
            break
          }
          catch {
            Write-Warning "Failed to download from ${url}: $_"
          }
        }
        
        if (-not $downloaded) {
          Write-Error "Failed to download Intel SDE from any source"
          exit 1
        }
        
        # Extract Intel SDE
        Write-Host "Extracting Intel SDE..."
        7z x $sdeFilename -y
        $tarFile = $sdeFilename -replace '\.xz$', ''
        7z x $tarFile -y
        
        # Find the SDE directory
        $sdeDir = Get-ChildItem -Directory -Filter "sde-external-*" | Select-Object -First 1
        if (-not $sdeDir) {
          Write-Error "Could not find extracted SDE directory"
          exit 1
        }
        
        $sdePath = $sdeDir.FullName
        Write-Host "Intel SDE extracted to: $sdePath"
        
        # Add to PATH
        echo "$sdePath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        
        # Verify installation
        & "$sdePath\sde.exe" --version
        if ($LASTEXITCODE -ne 0) {
          Write-Error "Failed to verify SDE installation"
          exit 1
        }
    
    # Cache SDE to speedup future CI runs
    - name: Cache Intel SDE
      uses: actions/cache@v3
      with:
        path: sde-external-*
        key: ${{ runner.os }}-sde-${sdeFilename}

    # Set RUSTFLAGS to enable AVX512
    - name: Set RUSTFLAGS for AVX512
      run: |
        echo "RUSTFLAGS=-C target-feature=+avx512f,+avx512dq,+avx512cd,+avx512bw,+avx512vl" >> $env:GITHUB_ENV
        echo "RUSTDOCFLAGS=-C target-feature=+avx512f,+avx512dq,+avx512cd,+avx512bw,+avx512vl" >> $env:GITHUB_ENV
      shell: powershell
    
    # Build tests with AVX512 features
    - name: Build tests with AVX512
      run: cargo test --target ${{ matrix.rust.target }} --no-run
    
    # Run tests under SDE emulation
    - name: Run tests under Intel SDE (Sapphire Rapids)
      shell: powershell
      run: |
        # Get all test executables
        $testExes = Get-ChildItem -Path "target\${{ matrix.rust.target }}\debug\deps" -Filter "*.exe" | 
                    Where-Object { $_.Name -match "^[^-]+-[a-f0-9]+\.exe$" }
        
        $failed = $false
        foreach ($exe in $testExes) {
          Write-Host "Running test: $($exe.Name)"
          & sde -spr -- $exe.FullName
          if ($LASTEXITCODE -ne 0) {
            Write-Host "Test failed: $($exe.Name)"
            $failed = $true
          }
        }
        
        if ($failed) {
          exit 1
        }
    
    # Also run doc tests under SDE
    - name: Run doc tests under Intel SDE
      shell: powershell
      run: |
        # This is trickier as cargo doesn't directly support running doc tests through a wrapper
        # We'll need to use CARGO_TARGET_X86_64_PC_WINDOWS_MSVC_RUNNER
        $env:CARGO_TARGET_X86_64_PC_WINDOWS_MSVC_RUNNER = "sde -spr --"
        cargo test --target ${{ matrix.rust.target }} --doc