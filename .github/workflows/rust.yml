name: Rust

on:
  push: {}
  pull_request: {}
  workflow_dispatch: {}
  schedule:
    #       Min Hr Day Month Weekday; so this should be 1:05am each day.
    - cron: '5  1  *   *     *'

jobs:
  build_test:
    runs-on: windows-latest
    strategy:
      matrix:
        rust:
        # DEPRECATED
        # # x86 without sse/sse2 on by default
        # - { target: i586-pc-windows-msvc, toolchain: 1.59.0 }
        # - { target: i586-pc-windows-msvc, toolchain: stable }
        # - { target: i586-pc-windows-msvc, toolchain: beta }
        # - { target: i586-pc-windows-msvc, toolchain: nightly }
        # x86
        # - { target: i686-pc-windows-msvc, toolchain: 1.59.0 }
        # - { target: i686-pc-windows-msvc, toolchain: stable }
        - { target: i686-pc-windows-msvc, toolchain: beta }
        - { target: i686-pc-windows-msvc, toolchain: nightly }
        # x86_64
        # - { target: x86_64-pc-windows-msvc, toolchain: 1.59.0 }
        # - { target: x86_64-pc-windows-msvc, toolchain: stable }
        - { target: x86_64-pc-windows-msvc, toolchain: beta }
        - { target: x86_64-pc-windows-msvc, toolchain: nightly }
    steps:
    - uses: actions/checkout@v1
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust.toolchain }}
        target:  ${{ matrix.rust.target }}
        profile: minimal
        default: true
    - name: suppress target-cpu=native on i586
      if: matrix.rust.target == 'i586-pc-windows-msvc'
      run: rm .cargo/config.toml
    - name: Run tests with default features
      run: cargo test --target ${{ matrix.rust.target }}
    - name: Run tests with all features
      run: cargo test --target ${{ matrix.rust.target }} --all-features

  avx512_emulated_test:
    runs-on: windows-latest
    strategy:
      matrix:
        rust:
          # To be enabled after 1.89 is stable
          # - { target: x86_64-pc-windows-msvc, toolchain: 1.89.0 }
          # - { target: x86_64-pc-windows-msvc, toolchain: stable }
          - { target: x86_64-pc-windows-msvc, toolchain: beta }
          - { target: x86_64-pc-windows-msvc, toolchain: nightly }
    steps:
    - uses: actions/checkout@v3
    
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust.toolchain }}
        target: ${{ matrix.rust.target }}
        profile: minimal
        default: true
        
    - name: Cache Intel SDE
      id: cache-sde
      uses: actions/cache@v3
      with:
        path: sde-external-*
        key: ${{ runner.os }}-sde-9.58.0-2025-06-16

    - name: Set SDE path from cache
      if: steps.cache-sde.outputs.cache-hit == 'true'
      shell: bash
      run: |
        set -euo pipefail
        SDE_DIR=$(find . -maxdepth 1 -type d -name "sde-external-*")
        if [ -z "$SDE_DIR" ]; then
          echo "Error: SDE directory not found after cache restore"
          exit 1
        fi
        echo "Found SDE directory: $SDE_DIR"
        echo "$SDE_DIR" >> $GITHUB_PATH

    - name: Install Intel SDE
      if: steps.cache-sde.outputs.cache-hit != 'true'
      shell: bash
      run: |
        set -euo pipefail

        SDE_VERSION=9.58.0
        SDE_DATE=2025-06-16
        SDE_ID=859732
        SDE_FILENAME="sde-external-${SDE_VERSION}-${SDE_DATE}-win.tar.xz"

        echo "SDE_VERSION=$SDE_VERSION" >> $GITHUB_ENV
        echo "SDE_DATE=$SDE_DATE" >> $GITHUB_ENV
        echo "SDE_ID=$SDE_ID" >> $GITHUB_ENV
        echo "SDE_FILENAME=$SDE_FILENAME" >> $GITHUB_ENV

        for url in \
          "https://downloadmirror.intel.com/${SDE_ID}/${SDE_FILENAME}" \
          "https://software.intel.com/content/dam/develop/external/us/en/protected/${SDE_FILENAME}"; do
          echo "Trying $url"
          if curl -fLO "$url"; then
            echo "Downloaded $SDE_FILENAME"
            break
          fi
        done

        # Extract
        tar -xf "$SDE_FILENAME"
        SDE_DIR=$(find . -type d -name "sde-external-*")
        echo "$SDE_DIR" >> "$GITHUB_PATH"

    # Set RUSTFLAGS to enable AVX512
    - name: Set RUSTFLAGS for AVX512
      run: |
        echo "RUSTFLAGS=-C target-feature=+avx512f,+avx512dq,+avx512cd,+avx512bw,+avx512vl" >> $env:GITHUB_ENV
        echo "RUSTDOCFLAGS=-C target-feature=+avx512f,+avx512dq,+avx512cd,+avx512bw,+avx512vl" >> $env:GITHUB_ENV
      shell: powershell
    
    # Build tests with AVX512 features
    - name: Build tests with AVX512
      run: cargo test --target ${{ matrix.rust.target }} --no-run
    
    # Run tests under SDE emulation
    - name: Run tests under Intel SDE (Sapphire Rapids)
      shell: powershell
      run: |
        # Get all test executables
        $testExes = Get-ChildItem -Path "target\${{ matrix.rust.target }}\debug\deps" -Filter "*.exe" | 
                    Where-Object { $_.Name -match "^[^-]+-[a-f0-9]+\.exe$" }
        
        $failed = $false
        foreach ($exe in $testExes) {
          Write-Host "Running test: $($exe.Name)"
          & sde -spr -- $exe.FullName
          if ($LASTEXITCODE -ne 0) {
            Write-Host "Test failed: $($exe.Name)"
            $failed = $true
          }
        }
        
        if ($failed) {
          exit 1
        }
    
    # Also run doc tests under SDE
    - name: Run doc tests under Intel SDE
      shell: powershell
      run: |
        # This is trickier as cargo doesn't directly support running doc tests through a wrapper
        # We'll need to use CARGO_TARGET_X86_64_PC_WINDOWS_MSVC_RUNNER
        $env:CARGO_TARGET_X86_64_PC_WINDOWS_MSVC_RUNNER = "sde -spr --"
        cargo test --target ${{ matrix.rust.target }} --doc